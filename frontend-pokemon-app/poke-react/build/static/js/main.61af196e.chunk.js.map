{"version":3,"sources":["components/Header.js","components/PokeCard.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","style","PokeCard","pokemon","key","id","name","color","description","src","sprites","alt","onClick","e","url_deploy_config","process","REACT_APP_URL_PRODUCTION","fetch","then","response","json","data","info","results","join","swal","catch","getAbilitie","App","state","pokemons","pokemonDetails","handleMoreClick","bind","event","console","log","this","getMorePokemon","setState","renderedPokemonList","map","index","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gSAaeA,G,MAXA,WACX,OACI,yBAAKC,UAAU,cACX,gCACI,wBAAKC,MAAO,CAAC,WAAa,WAA1B,sBACA,wBAAKA,MAAO,CAAC,WAAa,WAA1B,2C,gBCiCDC,EAlCE,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAqBf,OACI,yBAAKH,UAAU,2BAA2BC,MAAO,CAAC,SAAa,SAAUG,IAAKD,EAAQE,IACtF,yBAAKL,UAAU,eAAc,2BAAIG,EAAQG,OACzC,yBAAKN,UAAU,aACb,wBAAIA,UAAU,gCAA+BC,MAAO,CAACM,MAAQ,YAA7D,eAAqF,6BAAUJ,EAAQK,aACvG,yBAAKC,IAAKN,EAAQO,QAAR,cAAkCC,IAAI,gBAChD,yBAAKF,IAAKN,EAAQO,QAAR,aAAkCC,IAAI,gBAChD,4BAAQC,QAAS,kBA1BzB,SAAqBC,GACnB,IAAIC,EAAoBC,8CAAYC,yBAEpCC,MADYH,EAAkB,2BAA2BD,GAExDK,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,GAAIA,EAAM,CACR,IAAIC,EAAOD,EAAKE,QAAQC,KAAK,MAC7BC,IAAKH,QAGLG,IAAK,yEAGRC,MAAOD,IAAK,uEAYgBE,CAAYxB,EAAQG,QAA3C,sBC8BKsB,E,YAxDb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXC,SAAW,GACXC,eAAiB,IAGnB,EAAKC,gBAAkB,EAAKA,gBAAgBC,KAArB,gBAPX,E,6EAYEC,GACZC,QAAQC,IAAI,WAAaC,KAAKR,MAAM1B,W,0CAMtCkC,KAAKC,mB,uCAGW,IAAD,OACXxB,EAAoBC,8CAAYC,yBAEpCC,MADUH,EAAoB,wBAE7BI,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACAA,GACF,EAAKkB,SAAS,CAACR,eAAgBV,EAAKE,aAGvCG,MAAMS,QAAQC,O,+BAGP,IAEFI,EADmBH,KAAKR,MAAvBE,eACoCU,KAAI,SAACtC,EAAQuC,GACtD,OAAQ,kBAAC,EAAD,CAAUtC,IAAKsC,EAAOvC,QAASA,OAGzC,OACE,6BACE,kBAAC,EAAD,MACA,yBAAKH,UAAU,aACb,yBAAKA,UAAU,gBAEZwC,S,GAhDKG,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,MAAK,SAAAsC,GACjCA,EAAaC,kB","file":"static/js/main.61af196e.chunk.js","sourcesContent":["import React from 'react'\n\nconst Header = () => {\n    return (\n        <div className=\"App-topbar\">\n            <center>\n                <h1  style={{\"fontFamily\":\"Roboto\"}} >LISTA DE POKEMONES</h1>\n                <h3  style={{\"fontFamily\":\"Roboto\"}} >AQUÍ PODRÁS VER TUS POKEMONES</h3>\n            </center>\n        </div>\n    )\n};\n\nexport default Header","import React from 'react'\n\nimport swal from 'sweetalert';\n\n\n\nconst PokeCard = ({pokemon}) => {\n\n  function getAbilitie(e) {\n    let url_deploy_config = process.env.REACT_APP_URL_PRODUCTION;\n    const url = url_deploy_config+\"/api/v1/names_abilities/\"+e\n    fetch(url)\n    .then(response => response.json())\n    .then(data => {\n      if (data) {\n        var info = data.results.join(\"\\n\")\n        swal(info);\n      }\n      else{\n        swal(\"Se produjo un error en la API externa poke api intente nuevamente.\")\n      }\n    })\n    .catch( swal(\"Se produjo un error en la API externa poke api intente nuevamente.\")\n  )\n  \n  }\n\n    return (\n        <div className=\"card text-center mx-auto\" style={{\"maxWidth\" : \"18rem\"}} key={pokemon.id}>\n        <div className=\"card-header\"><b>{pokemon.name}</b></div>\n        <div className=\"card-body\">           \n          <h6 className=\"card-subtitle mb-2 text-muted\"style={{color : '#000000'}}>Description <br></br>{pokemon.description}</h6> \n          <img src={pokemon.sprites['front_default']} alt=\"description\" />\n          <img src={pokemon.sprites['back_default']}  alt=\"description\"/> \n          <button onClick={() => getAbilitie(pokemon.name)}>VER HABILIDADES</button>\n        </div>\n      </div>\n    )\n};\n\nexport default PokeCard","/* eslint-disable */\nimport React from 'react';\nimport {Component} from 'react';\nimport \"./App.css\"\nimport Header from './components/Header'\nimport PokeCard from './components/PokeCard'\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      pokemons : [],\n      pokemonDetails : [],\n\n    }\n    this.handleMoreClick = this.handleMoreClick.bind(this);\n  }\n\n  \n\n  handleMoreClick(event) {\n      console.log(\"Offset: \" + this.state.pokemon)\n    };\n    \n  \n  \n  componentDidMount() {\n    this.getMorePokemon();\n  }\n\n  getMorePokemon() {\n    let url_deploy_config = process.env.REACT_APP_URL_PRODUCTION;\n    let url = url_deploy_config + \"/api/v1/all_pokemons\";\n    fetch(url)\n    .then(response => response.json())\n    .then(data => {\n      if (data) {\n        this.setState({pokemonDetails: data.results})\n      }\n    })\n    .catch(console.log)\n  }\n\n  render() {\n    const {pokemonDetails} = this.state;\n    const renderedPokemonList = pokemonDetails.map((pokemon,index) => {\n      return (<PokeCard key={index} pokemon={pokemon} />);\n    });\n\n    return (\n      <div>\n        <Header />\n        <div className=\"container\">\n          <div className=\"card-columns\">\n         \n            {renderedPokemonList}\n          </div>\n        </div>\n      \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}